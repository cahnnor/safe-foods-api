{
  "openapi": "3.0.3",
  "info": {
    "title": "Safe Foods - OpenAPI 3.0",
    "description": "This is a basic Flask API that serves up and edits a database which contains data for a group of restaurants, each with associated dishes. Those two tables alongside a list of users covers the entire app. This is built as a RESTful API with all endpoints residing in `main.py`.\nYou can find out more about this project on its associated GitHub repo, as well as its DB Schema and UI repos. This is not associated with any real app, paid or otherwise, and is purely for personal and demonstration purposes.",
    "contact": {
      "email": "connorjamesl@hotmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "paths": {
    "/restaurants": {
      "get": {
        "tags": [
          "restaurant"
        ],
        "summary": "Read data on all restaurants",
        "description": "Runs a `SELECT *` query against all data in the restaurants table.",
        "operationId": "getRestaurants",
        "responses": {
          "200": {
            "description": "Successful Read.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Restaurants"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "restaurant"
        ],
        "summary": "Add a new restaurant.",
        "description": "Creates a new entry through an `INSERT INTO` query.",
        "operationId": "addRestaurant",
        "requestBody": {
          "description": "Example Restaurant",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "restaurant_name": {
                    "type": "string",
                    "description": "Name of the restaurant to add.",
                    "example": "Shawarma Palace"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful POST.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "string",
                      "description": "Confirmation of successful post",
                      "example": "Commit Successful!"
                    },
                    "status": {
                      "type": "integer",
                      "description": "status code returned by request.",
                      "example": 200
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "type of error",
                      "example": "Bad Request!"
                    },
                    "status": {
                      "type": "integer",
                      "format": "int64",
                      "example": 400
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "restaurant"
        ],
        "summary": "Add proximity info to restaurant.",
        "description": "Add proximity info to restaurant through an `UPDATE` query which takes the proximity to and delivery time from a restaurant you've ordered from.",
        "requestBody": {
          "description": "Example Restaurant",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "restaurant_name": {
                    "type": "string",
                    "description": "Name of the restaurant to add.",
                    "example": "Shawarma Palace"
                  },
                  "proximity": {
                    "type": "number",
                    "description": "Distance in km from the restaurant.",
                    "example": 2.5
                  },
                  "delivery_time": {
                    "type": "number",
                    "description": "Average time in minutes to get delivery from the restaurant.",
                    "example": 30
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful POST.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "string",
                      "description": "Confirmation of successful post",
                      "example": "Commit Successful!"
                    },
                    "status": {
                      "type": "integer",
                      "description": "status code returned by request.",
                      "example": 200
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "type of error",
                      "example": "Bad Request!"
                    },
                    "status": {
                      "type": "integer",
                      "format": "int64",
                      "example": 400
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/restaurant/{restaurant_name}": {
      "delete": {
        "tags": [
          "restaurant"
        ],
        "summary": "Remove a restaurant from the DB.",
        "description": "Removes a restaurant from the DB and all associated dishes, likes, and tags, using a series of `DELETE FROM` queries.",
        "parameters": [
          {
            "name": "restaurant_name",
            "in": "path",
            "description": "Name of the restaurant being removed.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Shawarma Palace"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Delete.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "string",
                      "description": "successful DELETE confirmation.",
                      "example": "Delete Successful!"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code.",
                      "example": 200
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "type of error",
                      "example": "Bad Request!"
                    },
                    "status": {
                      "type": "integer",
                      "format": "int64",
                      "example": 400
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/dishes": {
      "get": {
        "tags": [
          "dishes"
        ],
        "summary": "Read all dishes, sorted by restaurant.",
        "description": "Runs a `SELECT` query against the tables for dishes, likes, and tags to pull all info related to each dish and groups them by restaurant. This call can optionally take query parameters to filter the data depending on who wants to eat or what dietary restrictions need to be followed (i.e. filtering by tag or user names).",
        "parameters": [
          {
            "name": "user",
            "in": "query",
            "description": "Name of a user who has to like the dishes being queried for.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Connor"
            }
          },
          {
            "name": "tag",
            "in": "query",
            "description": "Tag to be filtered for.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Gluten-Free"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Read.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dishes"
                },
                "example": {
                  "Shawarma Palace": {
                    "dishes": {
                      "Chicken Shawarma Wrap": {
                        "likes": [
                          "Connor"
                        ],
                        "tags": [
                          "Halal"
                        ]
                      },
                      "Beef Shawarma Wrap": {
                        "likes": null,
                        "tags": [
                          "Halal"
                        ]
                      }
                    }
                  },
                  "status": 200
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "dishes"
        ],
        "description": "Adds a new dish using an `INSERT INTO` command which takes the new dish name, and an existing restaurant, as input. Fails if there is an attempt to post a dish that already exists.",
        "requestBody": {
          "description": "Info to create a dish (i.e. Name and name of restaurant).",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "dish_name": {
                    "type": "string",
                    "description": "The name of the dish",
                    "example": "Chicken Shawarma Wrap"
                  },
                  "restaurant_name": {
                    "type": "string",
                    "description": "The name of the restaurant",
                    "example": "Shawarma Palace"
                  }
                }
              }
            }
          }
        },
        "summary": "Add a new dish",
        "responses": {
          "200": {
            "description": "Successful Post.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "string",
                      "description": "successful POST confirmation.",
                      "example": "Commit Successful!"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code.",
                      "example": 200
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "type of error",
                      "example": "Bad Request!"
                    },
                    "status": {
                      "type": "integer",
                      "format": "int64",
                      "example": 400
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/restaurants/{restaurant_name}/{dish_name}": {
      "delete": {
        "tags": [
          "dishes"
        ],
        "description": "Deletes a dish from a given restaurant using a `DELETE FROM` query on the `restaurant_name` and `dish_name` provided.",
        "summary": "Removes a dish.",
        "parameters": [
          {
            "name": "restaurant_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Shawarma Palace"
            }
          },
          {
            "name": "dish_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Chicken Shawarma Wrap"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Delete.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "string",
                      "description": "successful DELETE confirmation.",
                      "example": "Deleted Chicken Shawarma Wrap successfully."
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code.",
                      "example": 200
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "type of error",
                      "example": "Bad Request!"
                    },
                    "status": {
                      "type": "integer",
                      "format": "int64",
                      "example": 400
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/likes": {
      "get": {
        "tags": [
          "likes"
        ],
        "parameters": [
          {
            "name": "restaurant_name",
            "in": "query",
            "description": "Name of the restaurant to read likes from.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Shawarma Palace"
            }
          },
          {
            "name": "dish_name",
            "in": "query",
            "description": "Name of the dish.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Chicken Shawarma Wrap"
            }
          }
        ],
        "summary": "Read likes for a given dish at a restaurant.",
        "description": "Runs a `SELECT *` query against the likes table using restaurant_name and dish_name as parameters.",
        "responses": {
          "200": {
            "description": "Successful Read.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Likes"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "type of error",
                      "example": "Bad Request!"
                    },
                    "status": {
                      "type": "integer",
                      "format": "int64",
                      "example": 400
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "likes"
        ],
        "description": "Runs a `INSERT INTO` query on the likes table using restaurant_name, dish_name and user_name as parameters. This is what runs when the user hits a like button.",
        "requestBody": {
          "description": "Info to specify the dish being liked.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "dish_name": {
                    "type": "string",
                    "description": "The name of the dish",
                    "example": "Chicken Shawarma Wrap"
                  },
                  "restaurant_name": {
                    "type": "string",
                    "description": "The name of the restaurant",
                    "example": "Shawarma Palace"
                  },
                  "user_name": {
                    "type": "string",
                    "description": "The user who likes the dish",
                    "example": "Connor"
                  }
                }
              }
            }
          }
        },
        "summary": "Mechanism for a user to like a dish at a given restaurant.",
        "responses": {
          "200": {
            "description": "Successful Post.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "string",
                      "description": "successful POST confirmation.",
                      "example": "Connor liked Chicken Shawarma Wrap at Shawarma Palace."
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code.",
                      "example": 200
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "type of error",
                      "example": "Bad Request!"
                    },
                    "status": {
                      "type": "integer",
                      "format": "int64",
                      "example": 400
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/likes/{restaurant_name}/{dish_name}/{user_name}": {
      "delete": {
        "tags": [
          "likes"
        ],
        "description": "Runs a `DELETE FROM` query on the likes table using restaurant_name, dish_name and user_name as parameters. This is what runs when the user hits a like button after they've already pressed it once.",
        "parameters": [
          {
            "name": "restaurant_name",
            "in": "path",
            "description": "Name of the restaurant the dish is from.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Shawarma Palace"
            }
          },
          {
            "name": "dish_name",
            "in": "path",
            "description": "Name of the dish.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Chicken Shawarma Wrap"
            }
          },
          {
            "name": "user_name",
            "in": "path",
            "required": true,
            "description": "User who is unliking the dish.",
            "schema": {
              "type": "string",
              "example": "Connor"
            }
          }
        ],
        "summary": "Mechanism for a user to remove their like from a dish at a given restaurant.",
        "responses": {
          "200": {
            "description": "Successful Delete.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "string",
                      "description": "successful DELETE confirmation.",
                      "example": "Like successfully removed from Chicken Shawarma Wrap for user Connor."
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code.",
                      "example": 200
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "type of error",
                      "example": "Bad Request!"
                    },
                    "status": {
                      "type": "integer",
                      "format": "int64",
                      "example": 400
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tags": {
      "get": {
        "tags": [
          "tags"
        ],
        "summary": "Read all tags.",
        "description": "Runs a `SELECT *` query against the likes table to pull all tags for all dishes. Not used for individual dishes since that kind of filtering is done on the dishes call anyways so it wouldn't be helpful to replicate here.",
        "responses": {
          "200": {
            "description": "Successful Read.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tags"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "type of error",
                      "example": "Bad Request!"
                    },
                    "status": {
                      "type": "integer",
                      "format": "int64",
                      "example": 400
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tags"
        ],
        "description": "Runs a `INSERT INTO` query on the tags table using restaurant_name, dish_name and tag as parameters. Allows the user to add a tag such as \"Halal\", or \"Lactose-Free\" to a dish so that you can filter for that tag depending on who is eating.",
        "requestBody": {
          "description": "Info to specify the dish being liked.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "dish_name": {
                    "type": "string",
                    "description": "The name of the dish",
                    "example": "Chicken Shawarma Wrap"
                  },
                  "restaurant_name": {
                    "type": "string",
                    "description": "The name of the restaurant",
                    "example": "Shawarma Palace"
                  },
                  "tag": {
                    "type": "string",
                    "description": "The name of the tag to filter by",
                    "example": "Halal"
                  }
                }
              }
            }
          }
        },
        "summary": "Mechanism for a user to like a dish at a given restaurant.",
        "responses": {
          "200": {
            "description": "Successful Post.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "string",
                      "description": "successful POST confirmation.",
                      "example": "Connor liked Chicken Shawarma Wrap at Shawarma Palace."
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code.",
                      "example": 200
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "type of error",
                      "example": "Bad Request!"
                    },
                    "status": {
                      "type": "integer",
                      "format": "int64",
                      "example": 400
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tags/{restaurant_name}/{dish_name}/{tag}": {
      "delete": {
        "tags": [
          "tags"
        ],
        "description": "Runs a `DELETE FROM` query on the likes table using restaurant_name, dish_name and user_name as parameters. This is what runs when the user hits a like button after they've already pressed it once.",
        "parameters": [
          {
            "name": "restaurant_name",
            "in": "path",
            "description": "Name of the restaurant the dish is from.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Shawarma Palace"
            }
          },
          {
            "name": "dish_name",
            "in": "path",
            "description": "Name of the dish.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Chicken Shawarma Wrap"
            }
          },
          {
            "name": "tag",
            "in": "path",
            "description": "The name of the tag/category.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Halal"
            }
          }
        ],
        "summary": "Mechanism for a user to remove their like from a dish at a given restaurant.",
        "responses": {
          "200": {
            "description": "Successful Delete.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "string",
                      "description": "successful DELETE confirmation.",
                      "example": "Like successfully removed from Chicken Shawarma Wrap for user Connor."
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code.",
                      "example": 200
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "type of error",
                      "example": "Bad Request!"
                    },
                    "status": {
                      "type": "integer",
                      "format": "int64",
                      "example": 400
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "users"
        ],
        "description": "Read Users.",
        "summary": "See all users.",
        "responses": {
          "200": {
            "description": "successful read.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "type of error",
                      "example": "Bad Request!"
                    },
                    "status": {
                      "type": "integer",
                      "format": "int64",
                      "example": 400
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "description": "Add a new user using an `INSERT INTO` query taking user_name from the request body.",
        "summary": "Add a new user",
        "requestBody": {
          "description": "Info to specify the dish being liked.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "user_name": {
                    "type": "string",
                    "description": "The user who likes the dish",
                    "example": "Connor"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful read.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "string",
                      "description": "Confirmation of successful post request.",
                      "example": "Added user Connor"
                    },
                    "status": {
                      "type": "integer",
                      "format": "int64",
                      "example": 200
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "type of error",
                      "example": "Bad Request!"
                    },
                    "status": {
                      "type": "integer",
                      "format": "int64",
                      "example": 400
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_name}": {
      "delete": {
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "user_name",
            "required": true,
            "in": "path",
            "description": "The name of the user in the application.",
            "schema": {
              "type": "string",
              "example": "Connor"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Delete.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "string",
                      "description": "successful DELETE confirmation.",
                      "example": "Removed user Test User"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code.",
                      "example": 200
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "type of error",
                      "example": "Bad Request!"
                    },
                    "status": {
                      "type": "integer",
                      "format": "int64",
                      "example": 400
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Restaurant": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "restaurant_name": {
            "type": "string",
            "description": "name of the restaurant",
            "example": "Shawarma Palace"
          },
          "delivery_time": {
            "type": "number",
            "description": "How long it typically takes a delivery to arrive.",
            "example": 30.5
          },
          "proximity": {
            "type": "number",
            "description": "Distance in KM to restaurant.",
            "example": 2.5
          },
          "tags": {
            "type": "object",
            "description": "Other data to filter restaurants by.",
            "example": {
              "Type": "Shawarma"
            }
          }
        }
      },
      "Restaurants": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Restaurant"
        }
      },
      "Dish": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name of the dish",
            "example": "Chicken Shawarma Wrap"
          },
          "likes": {
            "type": "array",
            "description": "Which users can eat or enjoy the dish",
            "items": {
              "type": "string"
            },
            "example": [
              "Connor"
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "additional tags to sort dishes by",
            "example": [
              "Gluten Free"
            ]
          }
        }
      },
      "Dishes": {
        "type": "object",
        "properties": {
          "restaurant": {
            "type": "object",
            "properties": {
              "dishes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Dish"
                }
              }
            }
          }
        }
      },
      "Like": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "user_name": {
            "type": "string",
            "description": "Name of the user who liked the dish.",
            "example": "Connor"
          },
          "restaurant_name": {
            "type": "string",
            "description": "Name of the restaurant.",
            "example": "Shawarma Palace"
          },
          "dish_name": {
            "type": "string",
            "description": "Name of the dish that the user liked.",
            "example": "Chicken Shawarma Wrap"
          }
        }
      },
      "Likes": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Like"
            }
          }
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "restaurant_name": {
            "type": "string",
            "description": "Name of the restaurant.",
            "example": "Shawarma Palace"
          },
          "dish_name": {
            "type": "string",
            "description": "Name of the dish that the user liked.",
            "example": "Chicken Shawarma Wrap"
          },
          "tag": {
            "type": "string",
            "description": "The tag for filtering.",
            "example": "Halal"
          }
        }
      },
      "Tags": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "user_name": {
            "type": "string",
            "description": "name of the user",
            "example": "Connor"
          }
        }
      },
      "Users": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      }
    }
  }
}